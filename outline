Main
There is a virtual clock that is an integer and incremented by 1 every loop
  initialized in main()
  incremented around line 276 in main() mainloop




A process arrives and is put into the Input Queue
  main() main loop 265


Input queue is ordered by Arrival Time


If a process completes OR a new process arrives, Memory Manager is used
  DecrementExecutionTime()
    Called during MemoryManager.RunProcesses()
      which is called at beginning of main loop

If the virtual clock time is the same as the Arrival of a process(es)
	Memory Manager will attempt to move it to memory

If a process is completed OR a new process arrives
	Print
		t = (current time of virtual clock): Process (#) arrives
	If it is a new process arriving
		the process will be added to the Input Queue
	If a process is completed
		Memory Manager will show that the process' memory region(s) that it was using are now available
	Memory Manager will check if head of Input Queue can go to memory
	If it can
		Memory Manager will allocate the memory and update the Input Queue
			If Memory Manager has to choose between lower end and upper end of a region (hole)
				it will always choose the lower end
		Memory Manager will check if the head of Input Queue can go into memory
			If it can, repeat previous 3 steps
	If it cannot
		Memory Manager will iterate through the Input Queue and see if there are
				any processes that CAN fit
	Input Queue is printed in the form
		Input Queue [1 2 ...] // the 1 and the 2 are the process IDs
	Memory Map is printed in the form
		Memory Map:
			0-Some number (based on page size): Process ID, Page #
			...
			some number - some number: Free frame(s)


// No processes can be added to memory partially. Either all of the process memory can
	// be allocated at one time, or it waits for enough room.
